{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Learning\\\\reactLearning\\\\react-food-order-app\\\\react-food-order-app\\\\src\\\\components\\\\Cart\\\\Cart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useCallback, useEffect } from 'react';\nimport Modal from '../UI/Modal';\nimport CartItem from './CartItem';\nimport classes from './Cart.module.css';\nimport CartContext from '../../store/cart-context';\nimport Checkout from './Checkout';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { orderActions } from '../../store/SendOrderResponses';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cart = props => {\n  _s();\n\n  const cartCtx = useContext(CartContext);\n  const dispatch = useDispatch();\n  const {\n    isCheckout,\n    isSubmitting,\n    didSubmit,\n    error\n  } = useSelector(state => state.orders);\n  const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;\n  const hasItems = cartCtx.items.length > 0;\n\n  const cartItemRemoveHandler = id => {\n    cartCtx.removeItem(id);\n  };\n\n  const cartItemAddHandler = item => {\n    cartCtx.addItem(item);\n  };\n\n  const orderHandler = () => {\n    dispatch(orderActions.setIsCheckout(true));\n  };\n\n  useEffect(() => {\n    if (error) {\n      cartCtx.clearCart();\n      dispatch(orderActions.setError(null));\n    }\n\n    return () => {};\n  }, [cartCtx, dispatch, error]);\n  const submitOrderHandler = useCallback(async userData => {\n    dispatch(orderActions.sendOrderRequest({\n      userData,\n      items: cartCtx.items\n    }));\n    cartCtx.clearCart();\n  }, [cartCtx, dispatch]);\n\n  const cartItems = /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: classes['cart-items'],\n    children: cartCtx.items.map(item => /*#__PURE__*/_jsxDEV(CartItem, {\n      name: item.name,\n      amount: item.amount,\n      price: item.price,\n      onRemove: cartItemRemoveHandler.bind(null, item.id),\n      onAdd: cartItemAddHandler.bind(null, item)\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n\n  const modalActions = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.actions,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes['button--alt'],\n      onClick: props.onClose,\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), hasItems && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes.button,\n      onClick: orderHandler,\n      children: \"Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n\n  const cartModalContent = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [cartItems, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.total,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Total Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: totalAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), isCheckout && /*#__PURE__*/_jsxDEV(Checkout, {\n      onConfirm: submitOrderHandler,\n      onCancel: props.onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), !isCheckout && modalActions]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n\n  const isSubmittingModalContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Sending order data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 36\n  }, this);\n\n  const orderState = error ? 'Sending order Failed!' : 'Successfully sent the order!';\n\n  const didSubmitModalContent = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: orderState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.button,\n        onClick: props.onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: props.onClose,\n    children: [!isSubmitting && !didSubmit && cartModalContent, isSubmitting && isSubmittingModalContent, !isSubmitting && didSubmit && didSubmitModalContent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cart, \"z1cT+jkX74zIsgqllsia6nWxvzI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Cart;\nexport default Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["D:/React Learning/reactLearning/react-food-order-app/react-food-order-app/src/components/Cart/Cart.js"],"names":["React","useContext","useCallback","useEffect","Modal","CartItem","classes","CartContext","Checkout","useSelector","useDispatch","orderActions","Cart","props","cartCtx","dispatch","isCheckout","isSubmitting","didSubmit","error","state","orders","totalAmount","toFixed","hasItems","items","length","cartItemRemoveHandler","id","removeItem","cartItemAddHandler","item","addItem","orderHandler","setIsCheckout","clearCart","setError","submitOrderHandler","userData","sendOrderRequest","cartItems","map","name","amount","price","bind","modalActions","actions","onClose","button","cartModalContent","total","isSubmittingModalContent","orderState","didSubmitModalContent"],"mappings":"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","sourcesContent":["import React, { useContext, useCallback, useEffect } from 'react';\n\nimport Modal from '../UI/Modal';\nimport CartItem from './CartItem';\nimport classes from './Cart.module.css';\nimport CartContext from '../../store/cart-context';\nimport Checkout from './Checkout';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { orderActions } from '../../store/SendOrderResponses'\n\n\nconst Cart = (props) => {\n  const cartCtx = useContext(CartContext);\n\n  const dispatch = useDispatch()\n\n  const { isCheckout, isSubmitting, didSubmit, error } = useSelector(state => state.orders)\n\n  const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;\n  const hasItems = cartCtx.items.length > 0;\n\n  const cartItemRemoveHandler = (id) => {\n    cartCtx.removeItem(id);\n  };\n\n  const cartItemAddHandler = (item) => {\n    cartCtx.addItem(item);\n  };\n\n  const orderHandler = () => {\n    dispatch(orderActions.setIsCheckout(true))\n  };\n\n  useEffect(() => {\n    if (error) {\n      cartCtx.clearCart()\n      dispatch(orderActions.setError(null))\n    }\n\n    return () => { }\n  }, [cartCtx, dispatch, error])\n\n  const submitOrderHandler = useCallback(async (userData) => {\n    dispatch(orderActions.sendOrderRequest({ userData, items: cartCtx.items }))\n    cartCtx.clearCart();\n  }, [cartCtx, dispatch])\n\n  const cartItems = (\n    <ul className={classes['cart-items']}>\n      {cartCtx.items.map((item) => (\n        <CartItem\n          key={item.id}\n          name={item.name}\n          amount={item.amount}\n          price={item.price}\n          onRemove={cartItemRemoveHandler.bind(null, item.id)}\n          onAdd={cartItemAddHandler.bind(null, item)}\n        />\n      ))}\n    </ul>\n  );\n\n  const modalActions = (\n    <div className={classes.actions}>\n      <button className={classes['button--alt']} onClick={props.onClose}>\n        Close\n      </button>\n      {hasItems && (\n        <button className={classes.button} onClick={orderHandler}>\n          Order\n        </button>\n      )}\n    </div>\n  );\n\n  const cartModalContent = (\n    <React.Fragment>\n      {cartItems}\n      <div className={classes.total}>\n        <span>Total Amount</span>\n        <span>{totalAmount}</span>\n      </div>\n      {isCheckout && (\n        <Checkout onConfirm={submitOrderHandler} onCancel={props.onClose} />\n      )}\n      {!isCheckout && modalActions}\n    </React.Fragment>\n  );\n\n  const isSubmittingModalContent = <p>Sending order data...</p>\n\n\n  const orderState = error ? 'Sending order Failed!' : 'Successfully sent the order!'\n\n  const didSubmitModalContent = (\n    <React.Fragment>\n      <p>{orderState}</p>\n      <div className={classes.actions}>\n        <button className={classes.button} onClick={props.onClose}>\n          Close\n      </button>\n      </div>\n    </React.Fragment>\n  );\n\n  return (\n    <Modal onClose={props.onClose}>\n      {!isSubmitting && !didSubmit && cartModalContent}\n      {isSubmitting && isSubmittingModalContent}\n      {!isSubmitting && didSubmit && didSubmitModalContent}\n    </Modal>\n  );\n};\n\nexport default Cart;\n"]},"metadata":{},"sourceType":"module"}