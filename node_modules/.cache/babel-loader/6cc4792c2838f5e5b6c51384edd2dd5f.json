{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Learning\\\\reactLearning\\\\react-food-order-app\\\\react-food-order-app\\\\src\\\\components\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport classes from './Checkout.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === '';\n\nconst isFiveChars = value => value.trim().length === 5;\n\nconst Checkout = props => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors,\n      isValid\n    }\n  } = useForm({\n    mode: 'onChange'\n  });\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = data => {\n    //  event.preventDefault();\n    console.log('confirm handler');\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value; // const enteredNameIsValid = !isEmpty(enteredName);\n    // const enteredStreetIsValid = !isEmpty(enteredStreet);\n    // const enteredCityIsValid = !isEmpty(enteredCity);\n    // const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    // setFormInputsValidity({\n    //   name: enteredNameIsValid,\n    //   street: enteredStreetIsValid,\n    //   city: enteredCityIsValid,\n    //   postalCode: enteredPostalCodeIsValid,\n    // });\n    // const formIsValid =\n    //   enteredNameIsValid &&\n    //   enteredStreetIsValid &&\n    //   enteredCityIsValid &&\n    //   enteredPostalCodeIsValid;\n\n    console.log(\" data \", data);\n\n    if (!isValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: data.name,\n      street: data.street,\n      city: data.city,\n      postalCode: data.postalCode\n    }); // props.onConfirm({\n    //   name: enteredName,\n    //   street: enteredStreet,\n    //   city: enteredCity,\n    //   postalCode: enteredPostalCode,\n    // });\n  };\n\n  const nameControlClasses = `${classes.control} ${!errors.name ? '' : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${!errors.street ? '' : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${!errors.postalCode ? '' : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${!errors.city ? '' : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: handleSubmit(confirmHandler),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef,\n        ...register(\"name\", {\n          minLength: {\n            value: 3,\n            message: 'Please enter a valid username!'\n          },\n          required: 'Name is required!'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), errors.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.name.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef,\n        ...register(\"street\", {\n          minLength: {\n            value: 3,\n            message: 'Please enter a valid street!'\n          },\n          required: 'Street is required!'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), errors.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.street.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef,\n        ...register(\"postalCode\", {\n          minLength: {\n            value: 5,\n            message: 'Please enter a valid postal code (5 characters long)!'\n          },\n          maxLength: {\n            value: 5,\n            message: 'Please enter a valid postal code (5 characters long)!'\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), errors.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.postalCode.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef,\n        ...register(\"city\", {\n          required: 'Please enter your city name!'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), errors.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.city.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        disabled: !isValid,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"HYMefCFDARBCzWxPPR8MA+fmwPs=\", false, function () {\n  return [useForm];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["D:/React Learning/reactLearning/react-food-order-app/react-food-order-app/src/components/Cart/Checkout.js"],"names":["useRef","useState","useForm","classes","isEmpty","value","trim","isFiveChars","length","Checkout","props","register","handleSubmit","formState","errors","isValid","mode","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","data","console","log","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","onConfirm","nameControlClasses","control","invalid","streetControlClasses","postalCodeControlClasses","cityControlClasses","form","minLength","message","required","maxLength","actions","onCancel","submit"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAAN,OAAiB,EAA5C;;AACA,MAAMC,WAAW,GAAIF,KAAD,IAAWA,KAAK,CAACC,IAAN,GAAaE,MAAb,KAAwB,CAAvD;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV;AAArC,MAA6Db,OAAO,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD,CAA1E;AACA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CjB,QAAQ,CAAC;AAC3DkB,IAAAA,IAAI,EAAE,IADqD;AAE3DC,IAAAA,MAAM,EAAE,IAFmD;AAG3DC,IAAAA,IAAI,EAAE,IAHqD;AAI3DC,IAAAA,UAAU,EAAE;AAJ+C,GAAD,CAA5D;AAOA,QAAMC,YAAY,GAAGvB,MAAM,EAA3B;AACA,QAAMwB,cAAc,GAAGxB,MAAM,EAA7B;AACA,QAAMyB,kBAAkB,GAAGzB,MAAM,EAAjC;AACA,QAAM0B,YAAY,GAAG1B,MAAM,EAA3B;;AAEA,QAAM2B,cAAc,GAAIC,IAAD,IAAU;AAC/B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,UAAMC,WAAW,GAAGR,YAAY,CAACS,OAAb,CAAqB3B,KAAzC;AACA,UAAM4B,aAAa,GAAGT,cAAc,CAACQ,OAAf,CAAuB3B,KAA7C;AACA,UAAM6B,iBAAiB,GAAGT,kBAAkB,CAACO,OAAnB,CAA2B3B,KAArD;AACA,UAAM8B,WAAW,GAAGT,YAAY,CAACM,OAAb,CAAqB3B,KAAzC,CAN+B,CAQ/B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACAwB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;;AACA,QAAI,CAACb,OAAL,EAAc;AACZ;AACD;;AAGDL,IAAAA,KAAK,CAAC0B,SAAN,CAAgB;AACdjB,MAAAA,IAAI,EAAES,IAAI,CAACT,IADG;AAEdC,MAAAA,MAAM,EAAEQ,IAAI,CAACR,MAFC;AAGdC,MAAAA,IAAI,EAAEO,IAAI,CAACP,IAHG;AAIdC,MAAAA,UAAU,EAAEM,IAAI,CAACN;AAJH,KAAhB,EA/B+B,CAsC/B;AACA;AACA;AACA;AACA;AACA;AACD,GA5CD;;AA8CA,QAAMe,kBAAkB,GAAI,GAAElC,OAAO,CAACmC,OAAQ,IAAG,CAACxB,MAAM,CAACK,IAAR,GAAe,EAAf,GAAoBhB,OAAO,CAACoC,OAAQ,EAArF;AACA,QAAMC,oBAAoB,GAAI,GAAErC,OAAO,CAACmC,OAAQ,IAAG,CAACxB,MAAM,CAACM,MAAR,GAAiB,EAAjB,GAAsBjB,OAAO,CAACoC,OAAQ,EAAzF;AACA,QAAME,wBAAwB,GAAI,GAAEtC,OAAO,CAACmC,OAAQ,IAAG,CAACxB,MAAM,CAACQ,UAAR,GAAqB,EAArB,GAA0BnB,OAAO,CAACoC,OAAQ,EAAjG;AACA,QAAMG,kBAAkB,GAAI,GAAEvC,OAAO,CAACmC,OAAQ,IAAG,CAACxB,MAAM,CAACO,IAAR,GAAe,EAAf,GAAoBlB,OAAO,CAACoC,OAAQ,EAArF;AAEA,sBACE;AAAM,IAAA,SAAS,EAAEpC,OAAO,CAACwC,IAAzB;AAA+B,IAAA,QAAQ,EAAE/B,YAAY,CAACe,cAAD,CAArD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEU,kBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,MAAtB;AAA6B,QAAA,GAAG,EAAEd,YAAlC;AAAA,WAAoDZ,QAAQ,CAAC,MAAD,EAAS;AAAEiC,UAAAA,SAAS,EAAE;AAAEvC,YAAAA,KAAK,EAAE,CAAT;AAAYwC,YAAAA,OAAO,EAAE;AAArB,WAAb;AAAsEC,UAAAA,QAAQ,EAAE;AAAhF,SAAT;AAA5D;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGhC,MAAM,CAACK,IAAP,iBAAe;AAAA,kBAAIL,MAAM,CAACK,IAAP,CAAY0B;AAAhB;AAAA;AAAA;AAAA;AAAA,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAEL,oBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,QAAtB;AAA+B,QAAA,GAAG,EAAEhB,cAApC;AAAA,WAAwDb,QAAQ,CAAC,QAAD,EAAW;AAAEiC,UAAAA,SAAS,EAAE;AAAEvC,YAAAA,KAAK,EAAE,CAAT;AAAYwC,YAAAA,OAAO,EAAE;AAArB,WAAb;AAAoEC,UAAAA,QAAQ,EAAE;AAA9E,SAAX;AAAhE;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGhC,MAAM,CAACM,MAAP,iBAAiB;AAAA,kBAAIN,MAAM,CAACM,MAAP,CAAcyB;AAAlB;AAAA;AAAA;AAAA;AAAA,cAHpB;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAWE;AAAK,MAAA,SAAS,EAAEJ,wBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,QAAtB;AAA+B,QAAA,GAAG,EAAEhB,kBAApC;AAAA,WAA6Dd,QAAQ,CAAC,YAAD,EAAe;AAAEiC,UAAAA,SAAS,EAAE;AAAEvC,YAAAA,KAAK,EAAE,CAAT;AAAYwC,YAAAA,OAAO,EAAE;AAArB,WAAb;AAA6FE,UAAAA,SAAS,EAAE;AAAE1C,YAAAA,KAAK,EAAE,CAAT;AAAYwC,YAAAA,OAAO,EAAE;AAArB;AAAxG,SAAf;AAArE;AAAA;AAAA;AAAA;AAAA,cAFF,EAGG/B,MAAM,CAACQ,UAAP,iBAAqB;AAAA,kBAAIR,MAAM,CAACQ,UAAP,CAAkBuB;AAAtB;AAAA;AAAA;AAAA;AAAA,cAHxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAgBE;AAAK,MAAA,SAAS,EAAEH,kBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,MAAtB;AAA6B,QAAA,GAAG,EAAEhB,YAAlC;AAAA,WAAqDf,QAAQ,CAAC,MAAD,EAAS;AAAEmC,UAAAA,QAAQ,EAAE;AAAZ,SAAT;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGhC,MAAM,CAACO,IAAP,iBAAe;AAAA,kBAAIP,MAAM,CAACO,IAAP,CAAYwB;AAAhB;AAAA;AAAA;AAAA;AAAA,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF,eAqBE;AAAK,MAAA,SAAS,EAAE1C,OAAO,CAAC6C,OAAxB;AAAA,8BACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEtC,KAAK,CAACuC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAQ,QAAA,SAAS,EAAE9C,OAAO,CAAC+C,MAA3B;AAAmC,QAAA,QAAQ,EAAE,CAACnC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CA/FD;;GAAMN,Q;UAC+DP,O;;;KAD/DO,Q;AAiGN,eAAeA,QAAf","sourcesContent":["import { useRef, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport classes from './Checkout.module.css';\n\nconst isEmpty = (value) => value.trim() === '';\nconst isFiveChars = (value) => value.trim().length === 5;\n\nconst Checkout = (props) => {\n  const { register, handleSubmit, formState: { errors, isValid } } = useForm({ mode: 'onChange' });\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true,\n  });\n\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = (data) => {\n    //  event.preventDefault();\n    console.log('confirm handler')\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n\n    // const enteredNameIsValid = !isEmpty(enteredName);\n    // const enteredStreetIsValid = !isEmpty(enteredStreet);\n    // const enteredCityIsValid = !isEmpty(enteredCity);\n    // const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n\n    // setFormInputsValidity({\n    //   name: enteredNameIsValid,\n    //   street: enteredStreetIsValid,\n    //   city: enteredCityIsValid,\n    //   postalCode: enteredPostalCodeIsValid,\n    // });\n\n    // const formIsValid =\n    //   enteredNameIsValid &&\n    //   enteredStreetIsValid &&\n    //   enteredCityIsValid &&\n    //   enteredPostalCodeIsValid;\n    console.log(\" data \", data)\n    if (!isValid) {\n      return;\n    }\n\n\n    props.onConfirm({\n      name: data.name,\n      street: data.street,\n      city: data.city,\n      postalCode: data.postalCode\n    });\n\n    // props.onConfirm({\n    //   name: enteredName,\n    //   street: enteredStreet,\n    //   city: enteredCity,\n    //   postalCode: enteredPostalCode,\n    // });\n  };\n\n  const nameControlClasses = `${classes.control} ${!errors.name ? '' : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${!errors.street ? '' : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${!errors.postalCode ? '' : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${!errors.city ? '' : classes.invalid}`;\n\n  return (\n    <form className={classes.form} onSubmit={handleSubmit(confirmHandler)}>\n      <div className={nameControlClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' ref={nameInputRef} {...register(\"name\", { minLength: { value: 3, message: 'Please enter a valid username!' }, required: 'Name is required!' })} />\n        {errors.name && <p>{errors.name.message}</p>}\n      </div>\n      <div className={streetControlClasses}>\n        <label htmlFor='street'>Street</label>\n        <input type='text' id='street' ref={streetInputRef} {...register(\"street\", { minLength: { value: 3, message: 'Please enter a valid street!' }, required: 'Street is required!' })} />\n        {errors.street && <p>{errors.street.message}</p>}\n      </div>\n      <div className={postalCodeControlClasses}>\n        <label htmlFor='postal'>Postal Code</label>\n        <input type='text' id='postal' ref={postalCodeInputRef}  {...register(\"postalCode\", { minLength: { value: 5, message: 'Please enter a valid postal code (5 characters long)!' }, maxLength: { value: 5, message: 'Please enter a valid postal code (5 characters long)!' } })} />\n        {errors.postalCode && <p>{errors.postalCode.message}</p>}\n      </div>\n      <div className={cityControlClasses}>\n        <label htmlFor='city'>City</label>\n        <input type='text' id='city' ref={cityInputRef}  {...register(\"city\", { required: 'Please enter your city name!' })} />\n        {errors.city && <p>{errors.city.message}</p>}\n      </div>\n      <div className={classes.actions}>\n        <button type='button' onClick={props.onCancel}>\n          Cancel\n        </button>\n        <button className={classes.submit} disabled={!isValid}>Confirm</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}