{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialCartState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialCartState,\n  reducers: {\n    add(state, action) {\n      console.log(action);\n      const {\n        item\n      } = action.payload;\n      const updatedTotalAmount = state.totalAmount + item.price * item.amount;\n      const existingCartItemIndex = state.items.findIndex(everyItem => everyItem.id === item.id);\n      const existingCartItem = state.items[existingCartItemIndex];\n      let updatedItems;\n\n      if (existingCartItem) {\n        const updatedItem = { ...existingCartItem,\n          amount: existingCartItem.amount + item.amount\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = updatedItem;\n      } else {\n        updatedItems = state.items.concat(item);\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    },\n\n    remove(state, action) {\n      const {\n        id\n      } = action.payload;\n      const existingCartItemIndex = state.items.findIndex(item => item.id === id);\n      const existingItem = state.items[existingCartItemIndex];\n      const updatedTotalAmount = state.totalAmount - existingItem.price;\n      let updatedItems;\n\n      if (existingItem.amount === 1) {\n        updatedItems = state.items.filter(item => item.id !== id);\n      } else {\n        const updatedItem = { ...existingItem,\n          amount: existingItem.amount - 1\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = updatedItem;\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    },\n\n    clear() {\n      return initialCartState;\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;","map":{"version":3,"sources":["D:/React Learning/reactLearning/react-food-order-app/react-food-order-app/src/store/cart-redux.js"],"names":["createSlice","initialCartState","items","totalAmount","cartSlice","name","initialState","reducers","add","state","action","console","log","item","payload","updatedTotalAmount","price","amount","existingCartItemIndex","findIndex","everyItem","id","existingCartItem","updatedItems","updatedItem","concat","remove","existingItem","filter","clear","cartActions","actions","cartReducer","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const initialCartState = {\r\n    items: [],\r\n    totalAmount: 0,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: initialCartState,\r\n    reducers: {\r\n        add(state, action) {\r\n            console.log(action)\r\n            const { item } = action.payload\r\n            const updatedTotalAmount =\r\n                state.totalAmount + item.price * item.amount;\r\n\r\n            const existingCartItemIndex = state.items.findIndex(\r\n                (everyItem) => everyItem.id === item.id\r\n            );\r\n            const existingCartItem = state.items[existingCartItemIndex];\r\n            let updatedItems;\r\n\r\n            if (existingCartItem) {\r\n                const updatedItem = {\r\n                    ...existingCartItem,\r\n                    amount: existingCartItem.amount + item.amount,\r\n                };\r\n                updatedItems = [...state.items];\r\n                updatedItems[existingCartItemIndex] = updatedItem;\r\n            } else {\r\n                updatedItems = state.items.concat(item);\r\n            }\r\n\r\n            return {\r\n                items: updatedItems,\r\n                totalAmount: updatedTotalAmount,\r\n            };\r\n        },\r\n        remove(state, action) {\r\n            const { id } = action.payload\r\n            const existingCartItemIndex = state.items.findIndex(\r\n                (item) => item.id === id\r\n            );\r\n            const existingItem = state.items[existingCartItemIndex];\r\n            const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n            let updatedItems;\r\n            if (existingItem.amount === 1) {\r\n                updatedItems = state.items.filter(item => item.id !== id);\r\n            } else {\r\n                const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n                updatedItems = [...state.items];\r\n                updatedItems[existingCartItemIndex] = updatedItem;\r\n            }\r\n\r\n            return {\r\n                items: updatedItems,\r\n                totalAmount: updatedTotalAmount\r\n            };\r\n        },\r\n\r\n        clear() {\r\n            return initialCartState;\r\n        }\r\n    },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport const cartReducer = cartSlice.reducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}