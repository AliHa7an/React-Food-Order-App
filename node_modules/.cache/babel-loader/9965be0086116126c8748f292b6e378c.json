{"ast":null,"code":"import { call, put } from \"redux-saga/effects\";\nimport sendRequest from '../requests/SendRequest';\nimport { mealActions } from '../../GetMealsResponses';\nimport { orderActions } from \"../../SendOrderResponses\";\nexport function* handleGetMeals() {\n  const url = 'https://react-http-59055-default-rtdb.firebaseio.com/meals.json';\n\n  try {\n    const responseData = yield call(sendRequest, {\n      url\n    });\n    const loadedMeals = [];\n\n    for (const key in responseData) {\n      loadedMeals.push({\n        id: key,\n        name: responseData[key].name,\n        description: responseData[key].description,\n        price: responseData[key].price\n      });\n    }\n\n    yield put(mealActions.setMeals(loadedMeals));\n    yield put(mealActions.setIsLoading(false));\n  } catch (error) {\n    yield put(mealActions.setIsLoading(false));\n    yield put(mealActions.setHttpError(error.message || 'Request Failed'));\n  }\n}\nexport function* handleSendOrder(action) {\n  const orderedItems = [];\n  const items = action.payload.items;\n\n  for (const element of items) {\n    const {\n      id,\n      ...item\n    } = element;\n    orderedItems[id] = item;\n  }\n\n  const url = 'https://react-http-59055-default-rtdb.firebaseio.com/orders.json';\n  const method = 'POST';\n  const body = {\n    user: action.payload.userData,\n    orderedItems: orderedItems\n  };\n\n  try {\n    yield put(orderActions.setIsSubmitting(true));\n    yield call(sendRequest, {\n      url,\n      method,\n      body\n    });\n    yield put(orderActions.setIsSubmitting(false));\n    yield put(orderActions.setDidSubmit(true));\n  } catch (error) {\n    yield put(orderActions.setError(error.message || 'Failed to send the Your Order!'));\n  }\n}","map":{"version":3,"sources":["D:/React Learning/reactLearning/react-food-order-app/react-food-order-app/src/store/saga/requestHandlers/RequestsHandlersSagas.js"],"names":["call","put","sendRequest","mealActions","orderActions","handleGetMeals","url","responseData","loadedMeals","key","push","id","name","description","price","setMeals","setIsLoading","error","setHttpError","message","handleSendOrder","action","orderedItems","items","payload","element","item","method","body","user","userData","setIsSubmitting","setDidSubmit","setError"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAO,UAAUC,cAAV,GAA2B;AAC9B,QAAMC,GAAG,GAAG,iEAAZ;;AACA,MAAI;AAEA,UAAMC,YAAY,GAAG,MAAMP,IAAI,CAACE,WAAD,EAAc;AAAEI,MAAAA;AAAF,KAAd,CAA/B;AACA,UAAME,WAAW,GAAG,EAApB;;AAEA,SAAK,MAAMC,GAAX,IAAkBF,YAAlB,EAAgC;AAC5BC,MAAAA,WAAW,CAACE,IAAZ,CAAiB;AACbC,QAAAA,EAAE,EAAEF,GADS;AAEbG,QAAAA,IAAI,EAAEL,YAAY,CAACE,GAAD,CAAZ,CAAkBG,IAFX;AAGbC,QAAAA,WAAW,EAAEN,YAAY,CAACE,GAAD,CAAZ,CAAkBI,WAHlB;AAIbC,QAAAA,KAAK,EAAEP,YAAY,CAACE,GAAD,CAAZ,CAAkBK;AAJZ,OAAjB;AAMH;;AAED,UAAMb,GAAG,CAACE,WAAW,CAACY,QAAZ,CAAqBP,WAArB,CAAD,CAAT;AACA,UAAMP,GAAG,CAACE,WAAW,CAACa,YAAZ,CAAyB,KAAzB,CAAD,CAAT;AACH,GAhBD,CAgBE,OAAOC,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACE,WAAW,CAACa,YAAZ,CAAyB,KAAzB,CAAD,CAAT;AACA,UAAMf,GAAG,CAACE,WAAW,CAACe,YAAZ,CAAyBD,KAAK,CAACE,OAAN,IAAiB,gBAA1C,CAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,eAAV,CAA0BC,MAA1B,EAAkC;AACrC,QAAMC,YAAY,GAAG,EAArB;AACA,QAAMC,KAAK,GAAGF,MAAM,CAACG,OAAP,CAAeD,KAA7B;;AACA,OAAK,MAAME,OAAX,IAAsBF,KAAtB,EAA6B;AACzB,UAAM;AAAEZ,MAAAA,EAAF;AAAM,SAAGe;AAAT,QAAkBD,OAAxB;AACAH,IAAAA,YAAY,CAACX,EAAD,CAAZ,GAAmBe,IAAnB;AACH;;AAED,QAAMpB,GAAG,GAAG,kEAAZ;AACA,QAAMqB,MAAM,GAAG,MAAf;AACA,QAAMC,IAAI,GAAG;AACTC,IAAAA,IAAI,EAAER,MAAM,CAACG,OAAP,CAAeM,QADZ;AAETR,IAAAA,YAAY,EAAEA;AAFL,GAAb;;AAMA,MAAI;AACA,UAAMrB,GAAG,CAACG,YAAY,CAAC2B,eAAb,CAA6B,IAA7B,CAAD,CAAT;AACA,UAAM/B,IAAI,CAACE,WAAD,EAAc;AAAEI,MAAAA,GAAF;AAAOqB,MAAAA,MAAP;AAAeC,MAAAA;AAAf,KAAd,CAAV;AACA,UAAM3B,GAAG,CAACG,YAAY,CAAC2B,eAAb,CAA6B,KAA7B,CAAD,CAAT;AACA,UAAM9B,GAAG,CAACG,YAAY,CAAC4B,YAAb,CAA0B,IAA1B,CAAD,CAAT;AAEH,GAND,CAME,OAAOf,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACG,YAAY,CAAC6B,QAAb,CAAsBhB,KAAK,CAACE,OAAN,IAAiB,gCAAvC,CAAD,CAAT;AACH;AACJ","sourcesContent":["import { call, put } from \"redux-saga/effects\";\r\nimport sendRequest from '../requests/SendRequest'\r\nimport { mealActions } from '../../GetMealsResponses'\r\nimport { orderActions } from \"../../SendOrderResponses\";\r\n\r\nexport function* handleGetMeals() {\r\n    const url = 'https://react-http-59055-default-rtdb.firebaseio.com/meals.json'\r\n    try {\r\n\r\n        const responseData = yield call(sendRequest, { url });\r\n        const loadedMeals = [];\r\n\r\n        for (const key in responseData) {\r\n            loadedMeals.push({\r\n                id: key,\r\n                name: responseData[key].name,\r\n                description: responseData[key].description,\r\n                price: responseData[key].price,\r\n            });\r\n        }\r\n\r\n        yield put(mealActions.setMeals(loadedMeals))\r\n        yield put(mealActions.setIsLoading(false))\r\n    } catch (error) {\r\n        yield put(mealActions.setIsLoading(false))\r\n        yield put(mealActions.setHttpError(error.message || 'Request Failed'))\r\n    }\r\n}\r\n\r\nexport function* handleSendOrder(action) {\r\n    const orderedItems = [];\r\n    const items = action.payload.items\r\n    for (const element of items) {\r\n        const { id, ...item } = element\r\n        orderedItems[id] = item;\r\n    }\r\n\r\n    const url = 'https://react-http-59055-default-rtdb.firebaseio.com/orders.json'\r\n    const method = 'POST'\r\n    const body = {\r\n        user: action.payload.userData,\r\n        orderedItems: orderedItems,\r\n    }\r\n\r\n\r\n    try {\r\n        yield put(orderActions.setIsSubmitting(true))\r\n        yield call(sendRequest, { url, method, body });\r\n        yield put(orderActions.setIsSubmitting(false))\r\n        yield put(orderActions.setDidSubmit(true))\r\n\r\n    } catch (error) {\r\n        yield put(orderActions.setError(error.message || 'Failed to send the Your Order!'))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}