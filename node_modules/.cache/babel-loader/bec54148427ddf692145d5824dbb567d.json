{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Learning\\\\reactLearning\\\\react-food-order-app\\\\react-food-order-app\\\\src\\\\store\\\\Cartprovider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport { cartReducer, cartActions, defaultCartState } from './cart-redux';\nimport CartContext from './cart-context'; // const defaultCartState = {\n//   items: [],\n//   totalAmount: 0,\n// };\n// const cartReducer = (state, action) => {\n//   if (action.type === 'ADD') {\n//     const updatedTotalAmount =\n//       state.totalAmount + action.item.price * action.item.amount;\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.item.id\n//     );\n//     const existingCartItem = state.items[existingCartItemIndex];\n//     let updatedItems;\n//     if (existingCartItem) {\n//       const updatedItem = {\n//         ...existingCartItem,\n//         amount: existingCartItem.amount + action.item.amount,\n//       };\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     } else {\n//       updatedItems = state.items.concat(action.item);\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n//   if (action.type === 'REMOVE') {\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.id\n//     );\n//     const existingItem = state.items[existingCartItemIndex];\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\n//     let updatedItems;\n//     if (existingItem.amount === 1) {\n//       updatedItems = state.items.filter(item => item.id !== action.id);\n//     } else {\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount\n//     };\n//   }\n//   if (action.type === 'CLEAR') {\n//     return defaultCartState;\n//   }\n//   return defaultCartState;\n// };\n// const CartProvider = (props) => {\n//   const [cartState, dispatchCartAction] = useReducer(\n//     cartReducer,\n//     defaultCartState\n//   );\n//   const addItemToCartHandler = (item) => {\n//     dispatchCartAction({ type: 'ADD', item: item });\n//   };\n//   const removeItemFromCartHandler = (id) => {\n//     dispatchCartAction({ type: 'REMOVE', id: id });\n//   };\n//   const clearCartHandler = () => {\n//     dispatchCartAction({type: 'CLEAR'});\n//   };\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount,\n//     addItem: addItemToCartHandler,\n//     removeItem: removeItemFromCartHandler,\n//     clearCart: clearCartHandler\n//   };\n//   return (\n//     <CartContext.Provider value={cartContext}>\n//       {props.children}\n//     </CartContext.Provider>\n//   );\n// };\n// export default CartProvider;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction(cartActions.add(item));\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction(cartActions.remove(id));\n  };\n\n  const clearCartHandler = () => {\n    dispatchCartAction(cartActions.clear());\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n    clearCart: clearCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/React Learning/reactLearning/react-food-order-app/react-food-order-app/src/store/Cartprovider.js"],"names":["useReducer","cartReducer","cartActions","defaultCartState","CartContext","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","item","add","removeItemFromCartHandler","id","remove","clearCartHandler","clear","cartContext","items","totalAmount","addItem","removeItem","clearCart","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,gBAAnC,QAA2D,cAA3D;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCR,UAAU,CAChDC,WADgD,EAEhDE,gBAFgD,CAAlD;;AAKA,QAAMM,oBAAoB,GAAIC,IAAD,IAAU;AACrCF,IAAAA,kBAAkB,CAACN,WAAW,CAACS,GAAZ,CAAgBD,IAAhB,CAAD,CAAlB;AACD,GAFD;;AAIA,QAAME,yBAAyB,GAAIC,EAAD,IAAQ;AACxCL,IAAAA,kBAAkB,CAACN,WAAW,CAACY,MAAZ,CAAmBD,EAAnB,CAAD,CAAlB;AACD,GAFD;;AAIA,QAAME,gBAAgB,GAAG,MAAM;AAC7BP,IAAAA,kBAAkB,CAACN,WAAW,CAACc,KAAZ,EAAD,CAAlB;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,KAAK,EAAEX,SAAS,CAACW,KADC;AAElBC,IAAAA,WAAW,EAAEZ,SAAS,CAACY,WAFL;AAGlBC,IAAAA,OAAO,EAAEX,oBAHS;AAIlBY,IAAAA,UAAU,EAAET,yBAJM;AAKlBU,IAAAA,SAAS,EAAEP;AALO,GAApB;AAQA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACGX,KAAK,CAACiB;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA/BD;;GAAMlB,Y;;KAAAA,Y;AAiCN,eAAeA,YAAf","sourcesContent":["import { useReducer } from 'react';\nimport { cartReducer, cartActions, defaultCartState } from './cart-redux'\nimport CartContext from './cart-context';\n\n// const defaultCartState = {\n//   items: [],\n//   totalAmount: 0,\n// };\n\n// const cartReducer = (state, action) => {\n//   if (action.type === 'ADD') {\n//     const updatedTotalAmount =\n//       state.totalAmount + action.item.price * action.item.amount;\n\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.item.id\n//     );\n//     const existingCartItem = state.items[existingCartItemIndex];\n//     let updatedItems;\n\n//     if (existingCartItem) {\n//       const updatedItem = {\n//         ...existingCartItem,\n//         amount: existingCartItem.amount + action.item.amount,\n//       };\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     } else {\n//       updatedItems = state.items.concat(action.item);\n//     }\n\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n//   if (action.type === 'REMOVE') {\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.id\n//     );\n//     const existingItem = state.items[existingCartItemIndex];\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\n//     let updatedItems;\n//     if (existingItem.amount === 1) {\n//       updatedItems = state.items.filter(item => item.id !== action.id);\n//     } else {\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     }\n\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount\n//     };\n//   }\n\n//   if (action.type === 'CLEAR') {\n//     return defaultCartState;\n//   }\n\n//   return defaultCartState;\n// };\n\n// const CartProvider = (props) => {\n//   const [cartState, dispatchCartAction] = useReducer(\n//     cartReducer,\n//     defaultCartState\n//   );\n\n//   const addItemToCartHandler = (item) => {\n//     dispatchCartAction({ type: 'ADD', item: item });\n//   };\n\n//   const removeItemFromCartHandler = (id) => {\n//     dispatchCartAction({ type: 'REMOVE', id: id });\n//   };\n\n//   const clearCartHandler = () => {\n//     dispatchCartAction({type: 'CLEAR'});\n//   };\n\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount,\n//     addItem: addItemToCartHandler,\n//     removeItem: removeItemFromCartHandler,\n//     clearCart: clearCartHandler\n//   };\n\n//   return (\n//     <CartContext.Provider value={cartContext}>\n//       {props.children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// export default CartProvider;\n\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction(cartActions.add(item));\n  };\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction(cartActions.remove(id));\n  };\n\n  const clearCartHandler = () => {\n    dispatchCartAction(cartActions.clear());\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n    clearCart: clearCartHandler\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}