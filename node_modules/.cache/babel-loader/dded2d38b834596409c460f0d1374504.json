{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Learning\\\\reactLearning\\\\react-food-order-app\\\\react-food-order-app\\\\src\\\\components\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport classes from './Checkout.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === '';\n\nconst isFiveChars = value => value.trim().length === 5;\n\nconst Checkout = props => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors,\n      isValid\n    }\n  } = useForm({\n    mode: 'onChange'\n  });\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalCodeIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: enteredName,\n      street: enteredStreet,\n      city: enteredCity,\n      postalCode: enteredPostalCode\n    });\n  };\n\n  const nameControlClasses = `${classes.control} ${!errors.name ? '' : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${!errors.street ? '' : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${!errors.postalCode ? '' : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${!errors.city ? '' : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef,\n        ...register(\"name\", {\n          minLength: {\n            value: 3,\n            message: 'Please enter a valid username!'\n          },\n          required: 'Name is required!'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), errors.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.name.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef,\n        ...register(\"street\", {\n          minLength: {\n            value: 3,\n            message: 'Please enter a valid street!'\n          },\n          required: 'Street is required!'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), errors.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.street.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef,\n        ...register(\"postalCode\", {\n          minLength: {\n            value: 5,\n            message: 'Please enter a valid postal code (5 characters long)!'\n          },\n          maxLength: {\n            value: 5,\n            message: 'Please enter a valid postal code (5 characters long)!'\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), errors.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.postalCode.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef,\n        ...register(\"city\", {\n          required: 'Please enter your city name!'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), errors.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.postalCode.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"HYMefCFDARBCzWxPPR8MA+fmwPs=\", false, function () {\n  return [useForm];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["D:/React Learning/reactLearning/react-food-order-app/react-food-order-app/src/components/Cart/Checkout.js"],"names":["useRef","useState","useForm","classes","isEmpty","value","trim","isFiveChars","length","Checkout","props","register","handleSubmit","formState","errors","isValid","mode","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalCodeIsValid","formIsValid","onConfirm","nameControlClasses","control","invalid","streetControlClasses","postalCodeControlClasses","cityControlClasses","form","minLength","message","required","maxLength","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport classes from './Checkout.module.css';\n\nconst isEmpty = (value) => value.trim() === '';\nconst isFiveChars = (value) => value.trim().length === 5;\n\nconst Checkout = (props) => {\n  const { register, handleSubmit, formState: { errors, isValid } } = useForm({ mode: 'onChange' });\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true,\n  });\n\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = (event) => {\n    event.preventDefault();\n\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalCodeIsValid,\n    });\n\n    const formIsValid =\n      enteredNameIsValid &&\n      enteredStreetIsValid &&\n      enteredCityIsValid &&\n      enteredPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: enteredName,\n      street: enteredStreet,\n      city: enteredCity,\n      postalCode: enteredPostalCode,\n    });\n  };\n\n  const nameControlClasses = `${classes.control} ${!errors.name ? '' : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${!errors.street ? '' : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${!errors.postalCode ? '' : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${!errors.city ? '' : classes.invalid}`;\n\n  return (\n    <form className={classes.form} onSubmit={confirmHandler}>\n      <div className={nameControlClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' ref={nameInputRef} {...register(\"name\", { minLength: { value: 3, message: 'Please enter a valid username!' }, required: 'Name is required!' })} />\n        {errors.name && <p>{errors.name.message}</p>}\n      </div>\n      <div className={streetControlClasses}>\n        <label htmlFor='street'>Street</label>\n        <input type='text' id='street' ref={streetInputRef} {...register(\"street\", { minLength: { value: 3, message: 'Please enter a valid street!' }, required: 'Street is required!' })} />\n        {errors.street && <p>{errors.street.message}</p>}\n      </div>\n      <div className={postalCodeControlClasses}>\n        <label htmlFor='postal'>Postal Code</label>\n        <input type='text' id='postal' ref={postalCodeInputRef}  {...register(\"postalCode\", { minLength: { value: 5, message: 'Please enter a valid postal code (5 characters long)!' }, maxLength: { value: 5, message: 'Please enter a valid postal code (5 characters long)!' } })} />\n        {errors.postalCode && <p>{errors.postalCode.message}</p>}\n      </div>\n      <div className={cityControlClasses}>\n        <label htmlFor='city'>City</label>\n        <input type='text' id='city' ref={cityInputRef}  {...register(\"city\", { required: 'Please enter your city name!' })} />\n        {errors.city && <p>{errors.postalCode.message}</p>}\n      </div>\n      <div className={classes.actions}>\n        <button type='button' onClick={props.onCancel}>\n          Cancel\n        </button>\n        <button className={classes.submit}>Confirm</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}